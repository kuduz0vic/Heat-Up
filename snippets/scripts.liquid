<script
  src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=63fb8d54806681128a4258a9"
  type="text/javascript"
  integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
  crossorigin="anonymous"></script>
<script src="{{ 'webflow.js' | asset_url }}" type="text/javascript"></script>
<script src="{{ 'shopify-money.js' | asset_url }}" type="text/javascript"></script>
<!-- [if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif] -->
<script src="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.js"></script>
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
<script
  src="https://code.jquery.com/jquery-3.6.3.js"
  integrity="sha256-nQLuAZGRRcILA+6dMBOvcRh5Pe310sBpanc6+QBmyVM="
  crossorigin="anonymous"></script>
<script>// document.addEventListener('DOMContentLoaded', () => {
// document.querySelectorAll('.cart-icon').forEach(trigger => {
// trigger.addEventListener('click', function(){ 
//    document.querySelectorAll('.body').forEach(target => target.classList.add('is-non-scrollable')); 
//    });
// });
// document.querySelectorAll('.overlay-sidebar-close-btn').forEach(trigger => {
// trigger.addEventListener('click', function(){ 
//    document.querySelectorAll('.body').forEach(target => target.classList.remove('is-non-scrollable')); 
//    });
// });
// });
</script><script>
var mySwiper = new Swiper('#why-swiper', {

  // Optional parameters
  spaceBetween: 16,
  slidesPerView: 1,
  freeMode: false,
  loop: true,
  centeredSlides: true,
  slidesPerGroup: 1,
  loopFillGroupWithBlank: false,

// Enable lazy loading
  lazy: true,
  pagination: {
    el: '#WhySwiperPagination'
  },
  navigation: {
    nextEl: "#why-next-arrow",
    prevEl: "#why-prev-arrow"
  },
  keyboard: {
    enabled: true
  }
});
</script><script>
var mySwiper = new Swiper('#review-swiper', {

  // Optional parameters
  spaceBetween: 16,
  slidesPerView: 1,
  freeMode: false,
  loop: true,
  centeredSlides: true,
  slidesPerGroup: 1,
  loopFillGroupWithBlank: false,

// Enable lazy loading
  lazy: true,
  navigation: {
    nextEl: "#review-next-arrow",
    prevEl: "#review-prev-arrow"
  },
  keyboard: {
    enabled: true
  },
  breakpoints: {
    480: {
      slidesPerView: 2,
      slidesPerGroup: 2,
      loopFillGroupWithBlank: false
    },
    992: {
      slidesPerView: 3,
      slidesPerGroup: 3,
      loopFillGroupWithBlank: false
    }
  }
})
</script><script>
var mySwiper = new Swiper('#key-features', {

  // Optional parameters
  spaceBetween: 16,
  slidesPerView: 1,
  freeMode: false,
  loop: true,
  centeredSlides: true,
  slidesPerGroup: 1,
  loopFillGroupWithBlank: false,

// Enable lazy loading
  lazy: true,
  navigation: {
    nextEl: "#key-features-next-arrow",
    prevEl: "#key-features-prev-arrow"
  },
  keyboard: {
    enabled: true
  },
  breakpoints: {
    480: {
      slidesPerView: 2,
      slidesPerGroup: 2,
      loopFillGroupWithBlank: false
    },
    992: {
      slidesPerView: 3,
      slidesPerGroup: 3,
      loopFillGroupWithBlank: false
    }
  }
})
</script><script>
var mySwiper = new Swiper('#instagram-swiper', {

  // Optional parameters
  spaceBetween: 16,
  slidesPerView: 2,
  freeMode: false,
  loop: true,
  centeredSlides: true,

// Enable lazy loading
  lazy: false,
  keyboard: {
    enabled: true
  },
  navigation: {
    nextEl: "#insta-next-arrow",
    prevEl: "#insta-prev-arrow"
  },
  breakpoints: {
    480: {
      slidesPerView: 2,
      centeredSlides: true
    },
    992: {
      slidesPerView: 4,
      centeredSlides: false
    }
  }
})
</script><script>
var mySwiper = new Swiper('#usp-swiper', {

  // Optional parameters
  spaceBetween: 16,
  slidesPerView: 1,
  freeMode: false,
  loop: true,
  centeredSlides: true,

// Enable lazy loading
  lazy: false,
  keyboard: {
    enabled: true
  },
  navigation: {
    nextEl: "#usp-next-arrow",
    prevEl: "#usp-prev-arrow"
  }
});
</script><script>
var swiper2 = new Swiper('#Product-Images-Swiper', {

  // Optional parameters
  spaceBetween: 8,
  slidesPerView: 1,
  freeMode: false,
  loop: false,
  centeredSlides: true,
  centeredSlidesBounds: true,

// Enable lazy loading
  lazy: false,
  keyboard: {
    enabled: true
  },
  pagination: {
    el: '#ProductSwiperPagination'
  },
  navigation: {
    nextEl: "#product-next-arrow",
    prevEl: "#product-prev-arrow"
  }
});
</script>{% comment %}
  Product Page Swatch Scripts
  {% endcomment %}<script>
const colorMap = {
  {% for block in section.blocks %}
    {% if block.type == 'color' %}
      '{{ block.settings.name }}' : '{{ block.settings.code }}',{% endif %}{% endfor %}
};

const allProducts = [
  {{ product | json }},{% for p in product.metafields.custom.linked_products.value %}{
      {
        p | json
      }
    },{% endfor %}
];

function app() {
  return {
    allProducts,
    product: allProducts[0],
    upsold: false,
    currentOptions: {},

    priceToCurr(price) {
      const n = parseInt(price);
      return `$${
        (n / 100).toFixed(2)
      }`;
    },

    get variant() {
      for (const variant of this.product.variants) {
        if (JSON.stringify(Object.values(this.currentOptions).sort()) === JSON.stringify(variant.options.sort())) {
          return variant;
        }
      }
      return null;
    },

    get productOptions() {
      const x = this.product.variants.reduce((prev, curr) => {
        for (let i = 0; i < curr.options.length; i++) {
          if (!prev[this.product.options[i]]) 
            prev[this.product.options[i]] = [];
          



          prev[this.product.options[i]].push(curr[`option${
              i + 1
            }`]);
          prev[this.product.options[i]] = [...new Set(prev[this.product.options[i]])];
        }

        return prev;
      }, {});

      return x;
    }
  };
}
</script><script>
$(document).ready(function() {

  $(document).ready(function() {
    $('.pdp-swatch-column>label:first').addClass('is-active');
  });

  $(document).ready(function() {
    $('.pdp-amount-column>label:first').addClass('is-active');
  });


  $(document).ready(function() {
    $('.pdp-swatch-column>div:first').addClass('w--redirected-checked');
  });


  $(document).ready(function() {
    $('.pdp-amount-field>span:first').addClass('bold-text');
  });


// Handle active state on swatch click
  $('.pdp-swatch-field').click(function() {
    $('.pdp-swatch-field').removeClass('is-active');
    $(this).closest('.pdp-swatch-field').addClass('is-active');
  });

  $('.pdp-swatch-field').click(function() {
    $('.w-form-formradioinput').removeClass('w--redirected-checked');
    $(this).find('.w-form-formradioinput').addClass('w--redirected-checked');
  });


  $('.pdp-amount-field').click(function() {
    $('.w-form-label').removeClass('bold-text');
    $(this).find('.w-form-label').addClass('bold-text');
  });


  $('.pdp-amount-field').click(function() {
    $('.pdp-amount-field').removeClass('is-active');
    $(this).closest('.pdp-amount-field').addClass('is-active');
  });
});
</script><script>
document.addEventListener("DOMContentLoaded", function() {
  const colorButtons = document.querySelectorAll(".swatch-Kleur label");
  const sizeButtons = document.querySelectorAll(".swatch-Aantal label");
  const addToCartButton = document.querySelector(".checkout-btn");
  const variants = document.querySelectorAll("[id^='variant-']");
  const price = document.querySelector(".price-pdp");
  const comparePrice = document.querySelector(".before-price-pdp");
  const discountSpan = document.querySelector("#discount");

  function updateAddToCartButton() {
    const selectedColor = document.querySelector(".swatch-Kleur input:checked").value;
    const selectedSize = document.querySelector(".swatch-Aantal input:checked").value;
    const selectedVariant = [... variants].find(variant => variant.dataset.color === selectedColor && variant.dataset.size === selectedSize);
    if (selectedVariant) {
      const variantId = selectedVariant.getAttribute("value");
      const variantPrice = parseFloat(selectedVariant.dataset.price) / 100;
      const formattedPrice = variantPrice.toLocaleString("nl-NL", {
        style: "currency",
        currency: "{{ shop.currency }}",
        minimumFractionDigits: 2
      });
      const buttonText = "Bestel nu - " + formattedPrice;
      addToCartButton.href = `/cart/add?id=${variantId}`;
      addToCartButton.textContent = buttonText;

// Update prices
      const variantComparePrice = parseFloat(selectedVariant.dataset.comparePrice) / 100;
      const formattedComparePrice = variantComparePrice.toLocaleString("nl-NL", {
        style: "currency",
        currency: "{{ shop.currency }}",
        minimumFractionDigits: 2
      });
      price.textContent = formattedPrice;
      comparePrice.textContent = formattedComparePrice;

// Update discount
      const discountAmount = Math.round((variantComparePrice - variantPrice) * 100) / 100;
      const formattedDiscount = discountAmount.toLocaleString("nl-NL", {minimumFractionDigits: 0}).replace(/ /g, '\u00a0');
      const discountSpans = document.querySelectorAll("#discount");
      discountSpans.forEach(span => {
        span.textContent = formattedDiscount;
      });
    }
  }

// Select the first variant on page load
  const firstColor = document.querySelector(".swatch-Kleur input:first-of-type");
  const firstSize = document.querySelector(".swatch-Aantal input:first-of-type");
  firstColor.checked = true;
  firstSize.checked = true;
  updateAddToCartButton();

  colorButtons.forEach(button => button.addEventListener("click", updateAddToCartButton));
  sizeButtons.forEach(button => button.addEventListener("click", updateAddToCartButton));
});
</script><script>
document.addEventListener("DOMContentLoaded", function() {
  const swatchFields = document.querySelectorAll(".pdp-swatch-field");
  const colorInputSpan = document.querySelector(".color-input");

// Run the function once on website load
  const firstSwatchField = swatchFields[0];
  const firstSwatchColor = firstSwatchField.querySelector("span").textContent;
  colorInputSpan.textContent = firstSwatchColor;

  swatchFields.forEach(function(swatchField) {
    swatchField.addEventListener("click", function() {
      const swatchColor = swatchField.querySelector("span").textContent;
      colorInputSpan.textContent = swatchColor;
    });
  });
});
</script><script>
document.addEventListener("DOMContentLoaded", function() {

// Step 1: Create array to store variant data
  const variantsData = [];

// Step 2: Loop through first three variants and add data to array
  {% for variant in product.variants limit:3 %}variantsData.push({option1: "{{ variant.option1 }}", option2: "{{ variant.option2 }}", price: "{{ variant.price | money_without_trailing_zeros }}", compare_at_price: "{{ variant.compare_at_price | money_without_trailing_zeros }}"});{% endfor %}

// Step 3: Loop through pdp-amount-field spans and update prices
  const amountFields = document.querySelectorAll('.pdp-amount-field span');
  amountFields.forEach(function(span) {
    const optionText = span.textContent.trim();
    const variantData = variantsData.find(function(data) {
      return data.option2 === optionText;
    });
    if (variantData) {
      const beforePriceSpan = span.closest('.pdp-amount-field').querySelector('.before-swatch-price');
      const newPriceSpan = span.closest('.pdp-amount-field').querySelector('.new-swatch-price');
      beforePriceSpan.textContent = variantData.compare_at_price;
      newPriceSpan.textContent = variantData.price;
    }
  });

});
</script><script>
var originalSlides = [];

// Save the original slides if they haven't been saved yet
if (originalSlides.length === 0) {
  let slides = document.querySelectorAll('.mySwiper2-slide');
  for (let slide of slides) {
    originalSlides.push(slide.cloneNode(true));
  }
}

var colorField = document.querySelector(".color-metafield");
var color = colorField.innerText;


var mySwiper2 = document.querySelector("#Product-Images-Swiper");
var mySwiper2Slides = mySwiper2.querySelectorAll(".swiper-slide");

for (var i = 0; i < mySwiper2Slides.length; i++) {
  var slide = mySwiper2Slides[i];
  if (slide.getAttribute("data-value") != color) {
    slide.parentElement.removeChild(slide);
  }
}
</script><script>
function handleClick() {

// Add the original slides back
  for (let slide of originalSlides) {
    swiper2.appendSlide(slide);
  }



  let parent = event.target.parentElement;
  let swatchText = parent.querySelector('.swatch-text-outside');
  let value = swatchText.textContent;

// Remove all current slides
  let currentSlides = document.querySelectorAll('.mySwiper2-slide');
  for (let slide of currentSlides) {
    let index = Array.prototype.indexOf.call(slide.parentNode.children, slide);
    swiper2.removeSlide(index);
  }

// Add the original slides back
  for (let slide of originalSlides) {
    swiper2.appendSlide(slide);
  }

  let targetSlide;
  for (let slide of originalSlides) {
    if (slide.getAttribute('data-value') == value) {
      targetSlide = slide;
      break;
    }
  }


  if (targetSlide) {
    let index = Array.prototype.indexOf.call(targetSlide.parentNode.children, targetSlide);
    swiper2.slideTo(index);
  }

// remove all non-active slides after swiper2 is updated
  originalSlides.forEach(function(slide) {
    if (slide.getAttribute('data-value') != value) {
      let index = Array.prototype.indexOf.call(slide.parentNode.children, slide);
      swiper2.removeSlide(index);
    }
  });


  swiper2.update();
}
</script><script>
function handleClickDesktop(initialColor) {
  const selectedColor = event.target.value || initialColor;
  const imageChangeDivs = document.querySelectorAll('.image-change');

// Loop through each image change div
  imageChangeDivs.forEach(div => {

// Get the data-value attribute of the div
    const dataValue = div.getAttribute('data-value');

// If the data-value matches the selected color, show the div, otherwise hide it
    if (dataValue === selectedColor) {
      div.style.display = 'block';
    } else {
      div.style.display = 'none';
    }
  });
}

// Call handleClick() once on page load using the text content from .color-metafield
document.addEventListener('DOMContentLoaded', function() {
  const colorMetafield = document.querySelector('.color-metafield');
  const initialColor = colorMetafield.textContent.trim();
  handleClickDesktop(initialColor);
});

// Add click event listeners to all swatch input elements
const swatchInputs = document.querySelectorAll('.color-input');
swatchInputs.forEach(input => {
  input.addEventListener('click', handleClickDesktop);
});
</script>